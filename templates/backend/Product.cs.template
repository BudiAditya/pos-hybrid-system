// templates/backend/Entities/Product.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace POSCloud.Core.Entities;

[Table("products")]
public class Product : BaseEntity
{
    [Required]
    [MaxLength(100)]
    public string Name { get; set; } = string.Empty;

    [Required]
    [MaxLength(20)]
    public string Code { get; set; } = string.Empty;

    [MaxLength(50)]
    public string? Barcode { get; set; }

    [Required]
    [Column(TypeName = "decimal(18,2)")]
    public decimal Price { get; set; }

    [Column(TypeName = "decimal(18,2)")]
    public decimal CostPrice { get; set; }

    public int StockQuantity { get; set; }
    public int MinimumStock { get; set; } = 0;

    [MaxLength(50)]
    public string Category { get; set; } = "General";

    [MaxLength(20)]
    public string Unit { get; set; } = "pcs";

    public bool IsActive { get; set; } = true;

    [Required]
    public Guid StoreId { get; set; }

    // Navigation properties
    public virtual Store? Store { get; set; }

    // Sync properties
    public DateTime LastSynced { get; set; } = DateTime.UtcNow;
    public bool IsDirty { get; set; } = false;
    public bool IsDeleted { get; set; } = false;

    // Collections
    public virtual ICollection<TransactionItem> TransactionItems { get; set; } = new List<TransactionItem>();

    // Methods
    public void UpdateStock(int quantity, StockUpdateReason reason)
    {
        if (reason == StockUpdateReason.Sale)
        {
            if (StockQuantity < quantity)
                throw new InvalidOperationException("Insufficient stock");
            
            StockQuantity -= quantity;
        }
        else if (reason == StockUpdateReason.Restock)
        {
            StockQuantity += quantity;
        }

        IsDirty = true;
        UpdatedAt = DateTime.UtcNow;
    }

    public bool IsLowStock() => StockQuantity <= MinimumStock;

    public void ApplyPriceChange(decimal newPrice, string reason)
    {
        var oldPrice = Price;
        Price = newPrice;
        IsDirty = true;
        UpdatedAt = DateTime.UtcNow;

        // Raise domain event for price change notification
        AddDomainEvent(new ProductPriceChangedEvent(this, oldPrice, newPrice, reason));
    }
}

public enum StockUpdateReason
{
    Sale,
    Restock,
    Adjustment,
    Return
}