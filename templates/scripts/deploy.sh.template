#!/bin/bash
# templates/scripts/deploy.sh

set -e  # Exit on error

# Configuration
APP_NAME="pos-cloud"
DEPLOY_USER="deployer"
DEPLOY_DIR="/var/www/$APP_NAME"
BACKUP_DIR="/backup/apps/$APP_NAME"
LOG_FILE="/var/log/deployments.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a $LOG_FILE
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" | tee -a $LOG_FILE
    exit 1
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARN:${NC} $1" | tee -a $LOG_FILE
}

# Check if running as deployer
check_user() {
    if [ "$(whoami)" != "$DEPLOY_USER" ]; then
        error "This script must be run as $DEPLOY_USER"
    fi
}

# Create backup of current version
create_backup() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    log "Creating backup of current version..."
    
    if [ -d "$DEPLOY_DIR" ]; then
        mkdir -p $BACKUP_DIR
        tar -czf $BACKUP_DIR/$APP_NAME-$timestamp.tar.gz -C $(dirname $DEPLOY_DIR) $(basename $DEPLOY_DIR)
        log "Backup created: $BACKUP_DIR/$APP_NAME-$timestamp.tar.gz"
    else
        warn "No existing deployment found for backup"
    fi
}

# Stop application services
stop_services() {
    log "Stopping application services..."
    
    sudo systemctl stop pos-api.service || warn "Failed to stop pos-api service"
    sudo systemctl stop pos-signalr.service || warn "Failed to stop pos-signalr service"
    
    # Wait for services to stop
    sleep 5
}

# Extract new version
extract_artifact() {
    local artifact=$1
    
    if [ ! -f "$artifact" ]; then
        error "Artifact file not found: $artifact"
    fi
    
    log "Extracting artifact: $artifact"
    
    # Create deployment directory
    sudo mkdir -p $DEPLOY_DIR
    sudo chown $DEPLOY_USER:$DEPLOY_USER $DEPLOY_DIR
    
    # Extract artifact
    tar -xzf $artifact -C $DEPLOY_DIR
    
    # Set permissions
    sudo chmod +x $DEPLOY_DIR/POSCloud.API
    sudo chmod +x $DEPLOY_DIR/POSCloud.SignalR
}

# Setup environment configuration
setup_environment() {
    log "Setting up environment configuration..."
    
    # Create production appsettings
    cat > $DEPLOY_DIR/appsettings.Production.json << EOF
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=pos_cloud;Username=pos_user;Password=$DB_PASSWORD;Pooling=true;Maximum Pool Size=100;"
  },
  "Jwt": {
    "Secret": "$JWT_SECRET",
    "Issuer": "pos-cloud.com",
    "Audience": "pos-cloud.com"
  },
  "Redis": {
    "ConnectionString": "localhost:6379,password=$REDIS_PASSWORD"
  }
}
EOF

    # Create log directory
    sudo mkdir -p /var/log/pos-cloud
    sudo chown $DEPLOY_USER:$DEPLOY_USER /var/log/pos-cloud
}

# Run database migrations
run_migrations() {
    log "Running database migrations..."
    
    cd $DEPLOY_DIR
    export ASPNETCORE_ENVIRONMENT=Production
    export DOTNET_ROOT=/usr/lib64/dotnet
    
    ./POSCloud.API --migrate
    
    if [ $? -ne 0 ]; then
        error "Database migration failed"
    fi
}

# Start application services
start_services() {
    log "Starting application services..."
    
    sudo systemctl daemon-reload
    sudo systemctl start pos-api.service
    sudo systemctl start pos-signalr.service
    
    # Wait for services to start
    sleep 10
    
    # Check service status
    if ! sudo systemctl is-active --quiet pos-api.service; then
        error "POS API service failed to start"
    fi
    
    if ! sudo systemctl is-active --quiet pos-signalr.service; then
        error "POS SignalR service failed to start"
    fi
}

# Health check
health_check() {
    log "Performing health check..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:5000/health >/dev/null 2>&1; then
            log "Health check passed"
            return 0
        fi
        
        log "Health check attempt $attempt failed, retrying..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    error "Health check failed after $max_attempts attempts"
}

# Cleanup old backups
cleanup_backups() {
    log "Cleaning up old backups..."
    
    # Keep backups from last 7 days
    find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete
}

# Main deployment function
deploy() {
    local artifact=$1
    
    log "Starting deployment process..."
    
    check_user
    create_backup
    stop_services
    extract_artifact "$artifact"
    setup_environment
    run_migrations
    start_services
    health_check
    cleanup_backups
    
    log "Deployment completed successfully!"
}

# Usage
usage() {
    echo "Usage: $0 <artifact-file>"
    echo "Example: $0 pos-cloud-v1.0.0.tar.gz"
    exit 1
}

# Main script execution
main() {
    if [ $# -ne 1 ]; then
        usage
    fi
    
    local artifact=$1
    
    # Source environment variables
    if [ -f .env ]; then
        source .env
    fi
    
    # Validate required environment variables
    if [ -z "$DB_PASSWORD" ] || [ -z "$JWT_SECRET" ] || [ -z "$REDIS_PASSWORD" ]; then
        error "Required environment variables not set: DB_PASSWORD, JWT_SECRET, REDIS_PASSWORD"
    fi
    
    deploy "$artifact"
}

# Run main function with all arguments
main "$@"